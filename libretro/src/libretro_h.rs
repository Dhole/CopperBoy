#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]

pub type c_char = i8;
pub type c_schar = i8;
pub type c_uchar = u8;
pub type c_short = i16;
pub type c_ushort = u16;
pub type c_int = i32;
pub type c_uint = u32;
#[cfg(any(target_pointer_width = "32", windows))]
pub type c_long = i32;
#[cfg(any(target_pointer_width = "32", windows))]
pub type c_ulong = u32;
#[cfg(all(target_pointer_width = "64", not(windows)))]
pub type c_long = i64;
#[cfg(all(target_pointer_width = "64", not(windows)))]
pub type c_ulong = u64;
pub type c_longlong = i64;
pub type c_ulonglong = u64;
pub type c_float = f32;
pub type c_double = f64;

/* automatically generated by rust-bindgen 0.56.0 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 32;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const RETRO_API_VERSION: u32 = 1;
pub const RETRO_DEVICE_TYPE_SHIFT: u32 = 8;
pub const RETRO_DEVICE_MASK: u32 = 255;
pub const RETRO_DEVICE_NONE: u32 = 0;
pub const RETRO_DEVICE_JOYPAD: u32 = 1;
pub const RETRO_DEVICE_MOUSE: u32 = 2;
pub const RETRO_DEVICE_KEYBOARD: u32 = 3;
pub const RETRO_DEVICE_LIGHTGUN: u32 = 4;
pub const RETRO_DEVICE_ANALOG: u32 = 5;
pub const RETRO_DEVICE_POINTER: u32 = 6;
pub const RETRO_DEVICE_ID_JOYPAD_B: u32 = 0;
pub const RETRO_DEVICE_ID_JOYPAD_Y: u32 = 1;
pub const RETRO_DEVICE_ID_JOYPAD_SELECT: u32 = 2;
pub const RETRO_DEVICE_ID_JOYPAD_START: u32 = 3;
pub const RETRO_DEVICE_ID_JOYPAD_UP: u32 = 4;
pub const RETRO_DEVICE_ID_JOYPAD_DOWN: u32 = 5;
pub const RETRO_DEVICE_ID_JOYPAD_LEFT: u32 = 6;
pub const RETRO_DEVICE_ID_JOYPAD_RIGHT: u32 = 7;
pub const RETRO_DEVICE_ID_JOYPAD_A: u32 = 8;
pub const RETRO_DEVICE_ID_JOYPAD_X: u32 = 9;
pub const RETRO_DEVICE_ID_JOYPAD_L: u32 = 10;
pub const RETRO_DEVICE_ID_JOYPAD_R: u32 = 11;
pub const RETRO_DEVICE_ID_JOYPAD_L2: u32 = 12;
pub const RETRO_DEVICE_ID_JOYPAD_R2: u32 = 13;
pub const RETRO_DEVICE_ID_JOYPAD_L3: u32 = 14;
pub const RETRO_DEVICE_ID_JOYPAD_R3: u32 = 15;
pub const RETRO_DEVICE_ID_JOYPAD_MASK: u32 = 256;
pub const RETRO_DEVICE_INDEX_ANALOG_LEFT: u32 = 0;
pub const RETRO_DEVICE_INDEX_ANALOG_RIGHT: u32 = 1;
pub const RETRO_DEVICE_INDEX_ANALOG_BUTTON: u32 = 2;
pub const RETRO_DEVICE_ID_ANALOG_X: u32 = 0;
pub const RETRO_DEVICE_ID_ANALOG_Y: u32 = 1;
pub const RETRO_DEVICE_ID_MOUSE_X: u32 = 0;
pub const RETRO_DEVICE_ID_MOUSE_Y: u32 = 1;
pub const RETRO_DEVICE_ID_MOUSE_LEFT: u32 = 2;
pub const RETRO_DEVICE_ID_MOUSE_RIGHT: u32 = 3;
pub const RETRO_DEVICE_ID_MOUSE_WHEELUP: u32 = 4;
pub const RETRO_DEVICE_ID_MOUSE_WHEELDOWN: u32 = 5;
pub const RETRO_DEVICE_ID_MOUSE_MIDDLE: u32 = 6;
pub const RETRO_DEVICE_ID_MOUSE_HORIZ_WHEELUP: u32 = 7;
pub const RETRO_DEVICE_ID_MOUSE_HORIZ_WHEELDOWN: u32 = 8;
pub const RETRO_DEVICE_ID_MOUSE_BUTTON_4: u32 = 9;
pub const RETRO_DEVICE_ID_MOUSE_BUTTON_5: u32 = 10;
pub const RETRO_DEVICE_ID_LIGHTGUN_SCREEN_X: u32 = 13;
pub const RETRO_DEVICE_ID_LIGHTGUN_SCREEN_Y: u32 = 14;
pub const RETRO_DEVICE_ID_LIGHTGUN_IS_OFFSCREEN: u32 = 15;
pub const RETRO_DEVICE_ID_LIGHTGUN_TRIGGER: u32 = 2;
pub const RETRO_DEVICE_ID_LIGHTGUN_RELOAD: u32 = 16;
pub const RETRO_DEVICE_ID_LIGHTGUN_AUX_A: u32 = 3;
pub const RETRO_DEVICE_ID_LIGHTGUN_AUX_B: u32 = 4;
pub const RETRO_DEVICE_ID_LIGHTGUN_START: u32 = 6;
pub const RETRO_DEVICE_ID_LIGHTGUN_SELECT: u32 = 7;
pub const RETRO_DEVICE_ID_LIGHTGUN_AUX_C: u32 = 8;
pub const RETRO_DEVICE_ID_LIGHTGUN_DPAD_UP: u32 = 9;
pub const RETRO_DEVICE_ID_LIGHTGUN_DPAD_DOWN: u32 = 10;
pub const RETRO_DEVICE_ID_LIGHTGUN_DPAD_LEFT: u32 = 11;
pub const RETRO_DEVICE_ID_LIGHTGUN_DPAD_RIGHT: u32 = 12;
pub const RETRO_DEVICE_ID_LIGHTGUN_X: u32 = 0;
pub const RETRO_DEVICE_ID_LIGHTGUN_Y: u32 = 1;
pub const RETRO_DEVICE_ID_LIGHTGUN_CURSOR: u32 = 3;
pub const RETRO_DEVICE_ID_LIGHTGUN_TURBO: u32 = 4;
pub const RETRO_DEVICE_ID_LIGHTGUN_PAUSE: u32 = 5;
pub const RETRO_DEVICE_ID_POINTER_X: u32 = 0;
pub const RETRO_DEVICE_ID_POINTER_Y: u32 = 1;
pub const RETRO_DEVICE_ID_POINTER_PRESSED: u32 = 2;
pub const RETRO_DEVICE_ID_POINTER_COUNT: u32 = 3;
pub const RETRO_REGION_NTSC: u32 = 0;
pub const RETRO_REGION_PAL: u32 = 1;
pub const RETRO_MEMORY_MASK: u32 = 255;
pub const RETRO_MEMORY_SAVE_RAM: u32 = 0;
pub const RETRO_MEMORY_RTC: u32 = 1;
pub const RETRO_MEMORY_SYSTEM_RAM: u32 = 2;
pub const RETRO_MEMORY_VIDEO_RAM: u32 = 3;
pub const RETRO_ENVIRONMENT_EXPERIMENTAL: u32 = 65536;
pub const RETRO_ENVIRONMENT_PRIVATE: u32 = 131072;
pub const RETRO_ENVIRONMENT_SET_ROTATION: u32 = 1;
pub const RETRO_ENVIRONMENT_GET_OVERSCAN: u32 = 2;
pub const RETRO_ENVIRONMENT_GET_CAN_DUPE: u32 = 3;
pub const RETRO_ENVIRONMENT_SET_MESSAGE: u32 = 6;
pub const RETRO_ENVIRONMENT_SHUTDOWN: u32 = 7;
pub const RETRO_ENVIRONMENT_SET_PERFORMANCE_LEVEL: u32 = 8;
pub const RETRO_ENVIRONMENT_GET_SYSTEM_DIRECTORY: u32 = 9;
pub const RETRO_ENVIRONMENT_SET_PIXEL_FORMAT: u32 = 10;
pub const RETRO_ENVIRONMENT_SET_INPUT_DESCRIPTORS: u32 = 11;
pub const RETRO_ENVIRONMENT_SET_KEYBOARD_CALLBACK: u32 = 12;
pub const RETRO_ENVIRONMENT_SET_DISK_CONTROL_INTERFACE: u32 = 13;
pub const RETRO_ENVIRONMENT_SET_HW_RENDER: u32 = 14;
pub const RETRO_ENVIRONMENT_GET_VARIABLE: u32 = 15;
pub const RETRO_ENVIRONMENT_SET_VARIABLES: u32 = 16;
pub const RETRO_ENVIRONMENT_GET_VARIABLE_UPDATE: u32 = 17;
pub const RETRO_ENVIRONMENT_SET_SUPPORT_NO_GAME: u32 = 18;
pub const RETRO_ENVIRONMENT_GET_LIBRETRO_PATH: u32 = 19;
pub const RETRO_ENVIRONMENT_SET_FRAME_TIME_CALLBACK: u32 = 21;
pub const RETRO_ENVIRONMENT_SET_AUDIO_CALLBACK: u32 = 22;
pub const RETRO_ENVIRONMENT_GET_RUMBLE_INTERFACE: u32 = 23;
pub const RETRO_ENVIRONMENT_GET_INPUT_DEVICE_CAPABILITIES: u32 = 24;
pub const RETRO_ENVIRONMENT_GET_SENSOR_INTERFACE: u32 = 65561;
pub const RETRO_ENVIRONMENT_GET_CAMERA_INTERFACE: u32 = 65562;
pub const RETRO_ENVIRONMENT_GET_LOG_INTERFACE: u32 = 27;
pub const RETRO_ENVIRONMENT_GET_PERF_INTERFACE: u32 = 28;
pub const RETRO_ENVIRONMENT_GET_LOCATION_INTERFACE: u32 = 29;
pub const RETRO_ENVIRONMENT_GET_CONTENT_DIRECTORY: u32 = 30;
pub const RETRO_ENVIRONMENT_GET_CORE_ASSETS_DIRECTORY: u32 = 30;
pub const RETRO_ENVIRONMENT_GET_SAVE_DIRECTORY: u32 = 31;
pub const RETRO_ENVIRONMENT_SET_SYSTEM_AV_INFO: u32 = 32;
pub const RETRO_ENVIRONMENT_SET_PROC_ADDRESS_CALLBACK: u32 = 33;
pub const RETRO_ENVIRONMENT_SET_SUBSYSTEM_INFO: u32 = 34;
pub const RETRO_ENVIRONMENT_SET_CONTROLLER_INFO: u32 = 35;
pub const RETRO_ENVIRONMENT_SET_MEMORY_MAPS: u32 = 65572;
pub const RETRO_ENVIRONMENT_SET_GEOMETRY: u32 = 37;
pub const RETRO_ENVIRONMENT_GET_USERNAME: u32 = 38;
pub const RETRO_ENVIRONMENT_GET_LANGUAGE: u32 = 39;
pub const RETRO_ENVIRONMENT_GET_CURRENT_SOFTWARE_FRAMEBUFFER: u32 = 65576;
pub const RETRO_ENVIRONMENT_GET_HW_RENDER_INTERFACE: u32 = 65577;
pub const RETRO_ENVIRONMENT_SET_SUPPORT_ACHIEVEMENTS: u32 = 65578;
pub const RETRO_ENVIRONMENT_SET_HW_RENDER_CONTEXT_NEGOTIATION_INTERFACE: u32 = 65579;
pub const RETRO_ENVIRONMENT_SET_SERIALIZATION_QUIRKS: u32 = 44;
pub const RETRO_ENVIRONMENT_SET_HW_SHARED_CONTEXT: u32 = 65580;
pub const RETRO_ENVIRONMENT_GET_VFS_INTERFACE: u32 = 65581;
pub const RETRO_ENVIRONMENT_GET_LED_INTERFACE: u32 = 65582;
pub const RETRO_ENVIRONMENT_GET_AUDIO_VIDEO_ENABLE: u32 = 65583;
pub const RETRO_ENVIRONMENT_GET_MIDI_INTERFACE: u32 = 65584;
pub const RETRO_ENVIRONMENT_GET_FASTFORWARDING: u32 = 65585;
pub const RETRO_ENVIRONMENT_GET_TARGET_REFRESH_RATE: u32 = 65586;
pub const RETRO_ENVIRONMENT_GET_INPUT_BITMASKS: u32 = 65587;
pub const RETRO_ENVIRONMENT_GET_CORE_OPTIONS_VERSION: u32 = 52;
pub const RETRO_ENVIRONMENT_SET_CORE_OPTIONS: u32 = 53;
pub const RETRO_ENVIRONMENT_SET_CORE_OPTIONS_INTL: u32 = 54;
pub const RETRO_ENVIRONMENT_SET_CORE_OPTIONS_DISPLAY: u32 = 55;
pub const RETRO_ENVIRONMENT_GET_PREFERRED_HW_RENDER: u32 = 56;
pub const RETRO_ENVIRONMENT_GET_DISK_CONTROL_INTERFACE_VERSION: u32 = 57;
pub const RETRO_ENVIRONMENT_SET_DISK_CONTROL_EXT_INTERFACE: u32 = 58;
pub const RETRO_ENVIRONMENT_GET_MESSAGE_INTERFACE_VERSION: u32 = 59;
pub const RETRO_ENVIRONMENT_SET_MESSAGE_EXT: u32 = 60;
pub const RETRO_ENVIRONMENT_GET_INPUT_MAX_USERS: u32 = 61;
pub const RETRO_ENVIRONMENT_SET_AUDIO_BUFFER_STATUS_CALLBACK: u32 = 62;
pub const RETRO_ENVIRONMENT_SET_MINIMUM_AUDIO_LATENCY: u32 = 63;
pub const RETRO_VFS_FILE_ACCESS_READ: u32 = 1;
pub const RETRO_VFS_FILE_ACCESS_WRITE: u32 = 2;
pub const RETRO_VFS_FILE_ACCESS_READ_WRITE: u32 = 3;
pub const RETRO_VFS_FILE_ACCESS_UPDATE_EXISTING: u32 = 4;
pub const RETRO_VFS_FILE_ACCESS_HINT_NONE: u32 = 0;
pub const RETRO_VFS_FILE_ACCESS_HINT_FREQUENT_ACCESS: u32 = 1;
pub const RETRO_VFS_SEEK_POSITION_START: u32 = 0;
pub const RETRO_VFS_SEEK_POSITION_CURRENT: u32 = 1;
pub const RETRO_VFS_SEEK_POSITION_END: u32 = 2;
pub const RETRO_VFS_STAT_IS_VALID: u32 = 1;
pub const RETRO_VFS_STAT_IS_DIRECTORY: u32 = 2;
pub const RETRO_VFS_STAT_IS_CHARACTER_SPECIAL: u32 = 4;
pub const RETRO_SERIALIZATION_QUIRK_INCOMPLETE: u32 = 1;
pub const RETRO_SERIALIZATION_QUIRK_MUST_INITIALIZE: u32 = 2;
pub const RETRO_SERIALIZATION_QUIRK_CORE_VARIABLE_SIZE: u32 = 4;
pub const RETRO_SERIALIZATION_QUIRK_FRONT_VARIABLE_SIZE: u32 = 8;
pub const RETRO_SERIALIZATION_QUIRK_SINGLE_SESSION: u32 = 16;
pub const RETRO_SERIALIZATION_QUIRK_ENDIAN_DEPENDENT: u32 = 32;
pub const RETRO_SERIALIZATION_QUIRK_PLATFORM_DEPENDENT: u32 = 64;
pub const RETRO_MEMDESC_CONST: u32 = 1;
pub const RETRO_MEMDESC_BIGENDIAN: u32 = 2;
pub const RETRO_MEMDESC_SYSTEM_RAM: u32 = 4;
pub const RETRO_MEMDESC_SAVE_RAM: u32 = 8;
pub const RETRO_MEMDESC_VIDEO_RAM: u32 = 16;
pub const RETRO_MEMDESC_ALIGN_2: u32 = 65536;
pub const RETRO_MEMDESC_ALIGN_4: u32 = 131072;
pub const RETRO_MEMDESC_ALIGN_8: u32 = 196608;
pub const RETRO_MEMDESC_MINSIZE_2: u32 = 16777216;
pub const RETRO_MEMDESC_MINSIZE_4: u32 = 33554432;
pub const RETRO_MEMDESC_MINSIZE_8: u32 = 50331648;
pub const RETRO_SIMD_SSE: u32 = 1;
pub const RETRO_SIMD_SSE2: u32 = 2;
pub const RETRO_SIMD_VMX: u32 = 4;
pub const RETRO_SIMD_VMX128: u32 = 8;
pub const RETRO_SIMD_AVX: u32 = 16;
pub const RETRO_SIMD_NEON: u32 = 32;
pub const RETRO_SIMD_SSE3: u32 = 64;
pub const RETRO_SIMD_SSSE3: u32 = 128;
pub const RETRO_SIMD_MMX: u32 = 256;
pub const RETRO_SIMD_MMXEXT: u32 = 512;
pub const RETRO_SIMD_SSE4: u32 = 1024;
pub const RETRO_SIMD_SSE42: u32 = 2048;
pub const RETRO_SIMD_AVX2: u32 = 4096;
pub const RETRO_SIMD_VFPU: u32 = 8192;
pub const RETRO_SIMD_PS: u32 = 16384;
pub const RETRO_SIMD_AES: u32 = 32768;
pub const RETRO_SIMD_VFPV3: u32 = 65536;
pub const RETRO_SIMD_VFPV4: u32 = 131072;
pub const RETRO_SIMD_POPCNT: u32 = 262144;
pub const RETRO_SIMD_MOVBE: u32 = 524288;
pub const RETRO_SIMD_CMOV: u32 = 1048576;
pub const RETRO_SIMD_ASIMD: u32 = 2097152;
pub const RETRO_SENSOR_ACCELEROMETER_X: u32 = 0;
pub const RETRO_SENSOR_ACCELEROMETER_Y: u32 = 1;
pub const RETRO_SENSOR_ACCELEROMETER_Z: u32 = 2;
pub const RETRO_SENSOR_GYROSCOPE_X: u32 = 3;
pub const RETRO_SENSOR_GYROSCOPE_Y: u32 = 4;
pub const RETRO_SENSOR_GYROSCOPE_Z: u32 = 5;
pub const RETRO_SENSOR_ILLUMINANCE: u32 = 6;
pub const RETRO_NUM_CORE_OPTION_VALUES_MAX: u32 = 128;
pub const RETRO_MEMORY_ACCESS_WRITE: u32 = 1;
pub const RETRO_MEMORY_ACCESS_READ: u32 = 2;
pub const RETRO_MEMORY_TYPE_CACHED: u32 = 1;
pub type __u_char = c_uchar;
pub type __u_short = c_ushort;
pub type __u_int = c_uint;
pub type __u_long = c_ulong;
pub type __int8_t = c_schar;
pub type __uint8_t = c_uchar;
pub type __int16_t = c_short;
pub type __uint16_t = c_ushort;
pub type __int32_t = c_int;
pub type __uint32_t = c_uint;
pub type __int64_t = c_long;
pub type __uint64_t = c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = c_long;
pub type __u_quad_t = c_ulong;
pub type __intmax_t = c_long;
pub type __uintmax_t = c_ulong;
pub type __dev_t = c_ulong;
pub type __uid_t = c_uint;
pub type __gid_t = c_uint;
pub type __ino_t = c_ulong;
pub type __ino64_t = c_ulong;
pub type __mode_t = c_uint;
pub type __nlink_t = c_ulong;
pub type __off_t = c_long;
pub type __off64_t = c_long;
pub type __pid_t = c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [c_int; 2usize],
}
pub type __clock_t = c_long;
pub type __rlim_t = c_ulong;
pub type __rlim64_t = c_ulong;
pub type __id_t = c_uint;
pub type __time_t = c_long;
pub type __useconds_t = c_uint;
pub type __suseconds_t = c_long;
pub type __suseconds64_t = c_long;
pub type __daddr_t = c_int;
pub type __key_t = c_int;
pub type __clockid_t = c_int;
pub type __timer_t = *mut ::core::ffi::c_void;
pub type __blksize_t = c_long;
pub type __blkcnt_t = c_long;
pub type __blkcnt64_t = c_long;
pub type __fsblkcnt_t = c_ulong;
pub type __fsblkcnt64_t = c_ulong;
pub type __fsfilcnt_t = c_ulong;
pub type __fsfilcnt64_t = c_ulong;
pub type __fsword_t = c_long;
pub type __ssize_t = c_long;
pub type __syscall_slong_t = c_long;
pub type __syscall_ulong_t = c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut c_char;
pub type __intptr_t = c_long;
pub type __socklen_t = c_uint;
pub type __sig_atomic_t = c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = c_schar;
pub type int_fast16_t = c_long;
pub type int_fast32_t = c_long;
pub type int_fast64_t = c_long;
pub type uint_fast8_t = c_uchar;
pub type uint_fast16_t = c_ulong;
pub type uint_fast32_t = c_ulong;
pub type uint_fast64_t = c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type size_t = c_ulong;
pub type wchar_t = c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
pub const RETRO_LANGUAGE_ENGLISH: retro_language = 0;
pub const RETRO_LANGUAGE_JAPANESE: retro_language = 1;
pub const RETRO_LANGUAGE_FRENCH: retro_language = 2;
pub const RETRO_LANGUAGE_SPANISH: retro_language = 3;
pub const RETRO_LANGUAGE_GERMAN: retro_language = 4;
pub const RETRO_LANGUAGE_ITALIAN: retro_language = 5;
pub const RETRO_LANGUAGE_DUTCH: retro_language = 6;
pub const RETRO_LANGUAGE_PORTUGUESE_BRAZIL: retro_language = 7;
pub const RETRO_LANGUAGE_PORTUGUESE_PORTUGAL: retro_language = 8;
pub const RETRO_LANGUAGE_RUSSIAN: retro_language = 9;
pub const RETRO_LANGUAGE_KOREAN: retro_language = 10;
pub const RETRO_LANGUAGE_CHINESE_TRADITIONAL: retro_language = 11;
pub const RETRO_LANGUAGE_CHINESE_SIMPLIFIED: retro_language = 12;
pub const RETRO_LANGUAGE_ESPERANTO: retro_language = 13;
pub const RETRO_LANGUAGE_POLISH: retro_language = 14;
pub const RETRO_LANGUAGE_VIETNAMESE: retro_language = 15;
pub const RETRO_LANGUAGE_ARABIC: retro_language = 16;
pub const RETRO_LANGUAGE_GREEK: retro_language = 17;
pub const RETRO_LANGUAGE_TURKISH: retro_language = 18;
pub const RETRO_LANGUAGE_SLOVAK: retro_language = 19;
pub const RETRO_LANGUAGE_PERSIAN: retro_language = 20;
pub const RETRO_LANGUAGE_HEBREW: retro_language = 21;
pub const RETRO_LANGUAGE_ASTURIAN: retro_language = 22;
pub const RETRO_LANGUAGE_FINNISH: retro_language = 23;
pub const RETRO_LANGUAGE_LAST: retro_language = 24;
pub const RETRO_LANGUAGE_DUMMY: retro_language = 2147483647;
pub type retro_language = c_uint;
pub const RETROK_UNKNOWN: retro_key = 0;
pub const RETROK_FIRST: retro_key = 0;
pub const RETROK_BACKSPACE: retro_key = 8;
pub const RETROK_TAB: retro_key = 9;
pub const RETROK_CLEAR: retro_key = 12;
pub const RETROK_RETURN: retro_key = 13;
pub const RETROK_PAUSE: retro_key = 19;
pub const RETROK_ESCAPE: retro_key = 27;
pub const RETROK_SPACE: retro_key = 32;
pub const RETROK_EXCLAIM: retro_key = 33;
pub const RETROK_QUOTEDBL: retro_key = 34;
pub const RETROK_HASH: retro_key = 35;
pub const RETROK_DOLLAR: retro_key = 36;
pub const RETROK_AMPERSAND: retro_key = 38;
pub const RETROK_QUOTE: retro_key = 39;
pub const RETROK_LEFTPAREN: retro_key = 40;
pub const RETROK_RIGHTPAREN: retro_key = 41;
pub const RETROK_ASTERISK: retro_key = 42;
pub const RETROK_PLUS: retro_key = 43;
pub const RETROK_COMMA: retro_key = 44;
pub const RETROK_MINUS: retro_key = 45;
pub const RETROK_PERIOD: retro_key = 46;
pub const RETROK_SLASH: retro_key = 47;
pub const RETROK_0: retro_key = 48;
pub const RETROK_1: retro_key = 49;
pub const RETROK_2: retro_key = 50;
pub const RETROK_3: retro_key = 51;
pub const RETROK_4: retro_key = 52;
pub const RETROK_5: retro_key = 53;
pub const RETROK_6: retro_key = 54;
pub const RETROK_7: retro_key = 55;
pub const RETROK_8: retro_key = 56;
pub const RETROK_9: retro_key = 57;
pub const RETROK_COLON: retro_key = 58;
pub const RETROK_SEMICOLON: retro_key = 59;
pub const RETROK_LESS: retro_key = 60;
pub const RETROK_EQUALS: retro_key = 61;
pub const RETROK_GREATER: retro_key = 62;
pub const RETROK_QUESTION: retro_key = 63;
pub const RETROK_AT: retro_key = 64;
pub const RETROK_LEFTBRACKET: retro_key = 91;
pub const RETROK_BACKSLASH: retro_key = 92;
pub const RETROK_RIGHTBRACKET: retro_key = 93;
pub const RETROK_CARET: retro_key = 94;
pub const RETROK_UNDERSCORE: retro_key = 95;
pub const RETROK_BACKQUOTE: retro_key = 96;
pub const RETROK_a: retro_key = 97;
pub const RETROK_b: retro_key = 98;
pub const RETROK_c: retro_key = 99;
pub const RETROK_d: retro_key = 100;
pub const RETROK_e: retro_key = 101;
pub const RETROK_f: retro_key = 102;
pub const RETROK_g: retro_key = 103;
pub const RETROK_h: retro_key = 104;
pub const RETROK_i: retro_key = 105;
pub const RETROK_j: retro_key = 106;
pub const RETROK_k: retro_key = 107;
pub const RETROK_l: retro_key = 108;
pub const RETROK_m: retro_key = 109;
pub const RETROK_n: retro_key = 110;
pub const RETROK_o: retro_key = 111;
pub const RETROK_p: retro_key = 112;
pub const RETROK_q: retro_key = 113;
pub const RETROK_r: retro_key = 114;
pub const RETROK_s: retro_key = 115;
pub const RETROK_t: retro_key = 116;
pub const RETROK_u: retro_key = 117;
pub const RETROK_v: retro_key = 118;
pub const RETROK_w: retro_key = 119;
pub const RETROK_x: retro_key = 120;
pub const RETROK_y: retro_key = 121;
pub const RETROK_z: retro_key = 122;
pub const RETROK_LEFTBRACE: retro_key = 123;
pub const RETROK_BAR: retro_key = 124;
pub const RETROK_RIGHTBRACE: retro_key = 125;
pub const RETROK_TILDE: retro_key = 126;
pub const RETROK_DELETE: retro_key = 127;
pub const RETROK_KP0: retro_key = 256;
pub const RETROK_KP1: retro_key = 257;
pub const RETROK_KP2: retro_key = 258;
pub const RETROK_KP3: retro_key = 259;
pub const RETROK_KP4: retro_key = 260;
pub const RETROK_KP5: retro_key = 261;
pub const RETROK_KP6: retro_key = 262;
pub const RETROK_KP7: retro_key = 263;
pub const RETROK_KP8: retro_key = 264;
pub const RETROK_KP9: retro_key = 265;
pub const RETROK_KP_PERIOD: retro_key = 266;
pub const RETROK_KP_DIVIDE: retro_key = 267;
pub const RETROK_KP_MULTIPLY: retro_key = 268;
pub const RETROK_KP_MINUS: retro_key = 269;
pub const RETROK_KP_PLUS: retro_key = 270;
pub const RETROK_KP_ENTER: retro_key = 271;
pub const RETROK_KP_EQUALS: retro_key = 272;
pub const RETROK_UP: retro_key = 273;
pub const RETROK_DOWN: retro_key = 274;
pub const RETROK_RIGHT: retro_key = 275;
pub const RETROK_LEFT: retro_key = 276;
pub const RETROK_INSERT: retro_key = 277;
pub const RETROK_HOME: retro_key = 278;
pub const RETROK_END: retro_key = 279;
pub const RETROK_PAGEUP: retro_key = 280;
pub const RETROK_PAGEDOWN: retro_key = 281;
pub const RETROK_F1: retro_key = 282;
pub const RETROK_F2: retro_key = 283;
pub const RETROK_F3: retro_key = 284;
pub const RETROK_F4: retro_key = 285;
pub const RETROK_F5: retro_key = 286;
pub const RETROK_F6: retro_key = 287;
pub const RETROK_F7: retro_key = 288;
pub const RETROK_F8: retro_key = 289;
pub const RETROK_F9: retro_key = 290;
pub const RETROK_F10: retro_key = 291;
pub const RETROK_F11: retro_key = 292;
pub const RETROK_F12: retro_key = 293;
pub const RETROK_F13: retro_key = 294;
pub const RETROK_F14: retro_key = 295;
pub const RETROK_F15: retro_key = 296;
pub const RETROK_NUMLOCK: retro_key = 300;
pub const RETROK_CAPSLOCK: retro_key = 301;
pub const RETROK_SCROLLOCK: retro_key = 302;
pub const RETROK_RSHIFT: retro_key = 303;
pub const RETROK_LSHIFT: retro_key = 304;
pub const RETROK_RCTRL: retro_key = 305;
pub const RETROK_LCTRL: retro_key = 306;
pub const RETROK_RALT: retro_key = 307;
pub const RETROK_LALT: retro_key = 308;
pub const RETROK_RMETA: retro_key = 309;
pub const RETROK_LMETA: retro_key = 310;
pub const RETROK_LSUPER: retro_key = 311;
pub const RETROK_RSUPER: retro_key = 312;
pub const RETROK_MODE: retro_key = 313;
pub const RETROK_COMPOSE: retro_key = 314;
pub const RETROK_HELP: retro_key = 315;
pub const RETROK_PRINT: retro_key = 316;
pub const RETROK_SYSREQ: retro_key = 317;
pub const RETROK_BREAK: retro_key = 318;
pub const RETROK_MENU: retro_key = 319;
pub const RETROK_POWER: retro_key = 320;
pub const RETROK_EURO: retro_key = 321;
pub const RETROK_UNDO: retro_key = 322;
pub const RETROK_OEM_102: retro_key = 323;
pub const RETROK_LAST: retro_key = 324;
pub const RETROK_DUMMY: retro_key = 2147483647;
pub type retro_key = c_uint;
pub const RETROKMOD_NONE: retro_mod = 0;
pub const RETROKMOD_SHIFT: retro_mod = 1;
pub const RETROKMOD_CTRL: retro_mod = 2;
pub const RETROKMOD_ALT: retro_mod = 4;
pub const RETROKMOD_META: retro_mod = 8;
pub const RETROKMOD_NUMLOCK: retro_mod = 16;
pub const RETROKMOD_CAPSLOCK: retro_mod = 32;
pub const RETROKMOD_SCROLLOCK: retro_mod = 64;
pub const RETROKMOD_DUMMY: retro_mod = 2147483647;
pub type retro_mod = c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_vfs_file_handle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_vfs_dir_handle {
    _unused: [u8; 0],
}
pub type retro_vfs_get_path_t = ::core::option::Option<
    unsafe extern "C" fn(stream: *mut retro_vfs_file_handle) -> *const c_char,
>;
pub type retro_vfs_open_t = ::core::option::Option<
    unsafe extern "C" fn(
        path: *const c_char,
        mode: c_uint,
        hints: c_uint,
    ) -> *mut retro_vfs_file_handle,
>;
pub type retro_vfs_close_t =
    ::core::option::Option<unsafe extern "C" fn(stream: *mut retro_vfs_file_handle) -> c_int>;
pub type retro_vfs_size_t =
    ::core::option::Option<unsafe extern "C" fn(stream: *mut retro_vfs_file_handle) -> i64>;
pub type retro_vfs_truncate_t = ::core::option::Option<
    unsafe extern "C" fn(stream: *mut retro_vfs_file_handle, length: i64) -> i64,
>;
pub type retro_vfs_tell_t =
    ::core::option::Option<unsafe extern "C" fn(stream: *mut retro_vfs_file_handle) -> i64>;
pub type retro_vfs_seek_t = ::core::option::Option<
    unsafe extern "C" fn(
        stream: *mut retro_vfs_file_handle,
        offset: i64,
        seek_position: c_int,
    ) -> i64,
>;
pub type retro_vfs_read_t = ::core::option::Option<
    unsafe extern "C" fn(
        stream: *mut retro_vfs_file_handle,
        s: *mut ::core::ffi::c_void,
        len: u64,
    ) -> i64,
>;
pub type retro_vfs_write_t = ::core::option::Option<
    unsafe extern "C" fn(
        stream: *mut retro_vfs_file_handle,
        s: *const ::core::ffi::c_void,
        len: u64,
    ) -> i64,
>;
pub type retro_vfs_flush_t =
    ::core::option::Option<unsafe extern "C" fn(stream: *mut retro_vfs_file_handle) -> c_int>;
pub type retro_vfs_remove_t =
    ::core::option::Option<unsafe extern "C" fn(path: *const c_char) -> c_int>;
pub type retro_vfs_rename_t = ::core::option::Option<
    unsafe extern "C" fn(old_path: *const c_char, new_path: *const c_char) -> c_int,
>;
pub type retro_vfs_stat_t =
    ::core::option::Option<unsafe extern "C" fn(path: *const c_char, size: *mut i32) -> c_int>;
pub type retro_vfs_mkdir_t =
    ::core::option::Option<unsafe extern "C" fn(dir: *const c_char) -> c_int>;
pub type retro_vfs_opendir_t = ::core::option::Option<
    unsafe extern "C" fn(dir: *const c_char, include_hidden: bool) -> *mut retro_vfs_dir_handle,
>;
pub type retro_vfs_readdir_t =
    ::core::option::Option<unsafe extern "C" fn(dirstream: *mut retro_vfs_dir_handle) -> bool>;
pub type retro_vfs_dirent_get_name_t = ::core::option::Option<
    unsafe extern "C" fn(dirstream: *mut retro_vfs_dir_handle) -> *const c_char,
>;
pub type retro_vfs_dirent_is_dir_t =
    ::core::option::Option<unsafe extern "C" fn(dirstream: *mut retro_vfs_dir_handle) -> bool>;
pub type retro_vfs_closedir_t =
    ::core::option::Option<unsafe extern "C" fn(dirstream: *mut retro_vfs_dir_handle) -> c_int>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_vfs_interface {
    pub get_path: retro_vfs_get_path_t,
    pub open: retro_vfs_open_t,
    pub close: retro_vfs_close_t,
    pub size: retro_vfs_size_t,
    pub tell: retro_vfs_tell_t,
    pub seek: retro_vfs_seek_t,
    pub read: retro_vfs_read_t,
    pub write: retro_vfs_write_t,
    pub flush: retro_vfs_flush_t,
    pub remove: retro_vfs_remove_t,
    pub rename: retro_vfs_rename_t,
    pub truncate: retro_vfs_truncate_t,
    pub stat: retro_vfs_stat_t,
    pub mkdir: retro_vfs_mkdir_t,
    pub opendir: retro_vfs_opendir_t,
    pub readdir: retro_vfs_readdir_t,
    pub dirent_get_name: retro_vfs_dirent_get_name_t,
    pub dirent_is_dir: retro_vfs_dirent_is_dir_t,
    pub closedir: retro_vfs_closedir_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_vfs_interface_info {
    pub required_interface_version: u32,
    pub iface: *mut retro_vfs_interface,
}
pub const RETRO_HW_RENDER_INTERFACE_VULKAN: retro_hw_render_interface_type = 0;
pub const RETRO_HW_RENDER_INTERFACE_D3D9: retro_hw_render_interface_type = 1;
pub const RETRO_HW_RENDER_INTERFACE_D3D10: retro_hw_render_interface_type = 2;
pub const RETRO_HW_RENDER_INTERFACE_D3D11: retro_hw_render_interface_type = 3;
pub const RETRO_HW_RENDER_INTERFACE_D3D12: retro_hw_render_interface_type = 4;
pub const RETRO_HW_RENDER_INTERFACE_GSKIT_PS2: retro_hw_render_interface_type = 5;
pub const RETRO_HW_RENDER_INTERFACE_DUMMY: retro_hw_render_interface_type = 2147483647;
pub type retro_hw_render_interface_type = c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_hw_render_interface {
    pub interface_type: retro_hw_render_interface_type,
    pub interface_version: c_uint,
}
pub type retro_set_led_state_t =
    ::core::option::Option<unsafe extern "C" fn(led: c_int, state: c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_led_interface {
    pub set_led_state: retro_set_led_state_t,
}
pub type retro_midi_input_enabled_t = ::core::option::Option<unsafe extern "C" fn() -> bool>;
pub type retro_midi_output_enabled_t = ::core::option::Option<unsafe extern "C" fn() -> bool>;
pub type retro_midi_read_t = ::core::option::Option<unsafe extern "C" fn(byte: *mut u8) -> bool>;
pub type retro_midi_write_t =
    ::core::option::Option<unsafe extern "C" fn(byte: u8, delta_time: u32) -> bool>;
pub type retro_midi_flush_t = ::core::option::Option<unsafe extern "C" fn() -> bool>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_midi_interface {
    pub input_enabled: retro_midi_input_enabled_t,
    pub output_enabled: retro_midi_output_enabled_t,
    pub read: retro_midi_read_t,
    pub write: retro_midi_write_t,
    pub flush: retro_midi_flush_t,
}
pub const RETRO_HW_RENDER_CONTEXT_NEGOTIATION_INTERFACE_VULKAN:
    retro_hw_render_context_negotiation_interface_type = 0;
pub const RETRO_HW_RENDER_CONTEXT_NEGOTIATION_INTERFACE_DUMMY:
    retro_hw_render_context_negotiation_interface_type = 2147483647;
pub type retro_hw_render_context_negotiation_interface_type = c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_hw_render_context_negotiation_interface {
    pub interface_type: retro_hw_render_context_negotiation_interface_type,
    pub interface_version: c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_memory_descriptor {
    pub flags: u64,
    pub ptr: *mut ::core::ffi::c_void,
    pub offset: size_t,
    pub start: size_t,
    pub select: size_t,
    pub disconnect: size_t,
    pub len: size_t,
    pub addrspace: *const c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_memory_map {
    pub descriptors: *const retro_memory_descriptor,
    pub num_descriptors: c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_controller_description {
    pub desc: *const c_char,
    pub id: c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_controller_info {
    pub types: *const retro_controller_description,
    pub num_types: c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_subsystem_memory_info {
    pub extension: *const c_char,
    pub type_: c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_subsystem_rom_info {
    pub desc: *const c_char,
    pub valid_extensions: *const c_char,
    pub need_fullpath: bool,
    pub block_extract: bool,
    pub required: bool,
    pub memory: *const retro_subsystem_memory_info,
    pub num_memory: c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_subsystem_info {
    pub desc: *const c_char,
    pub ident: *const c_char,
    pub roms: *const retro_subsystem_rom_info,
    pub num_roms: c_uint,
    pub id: c_uint,
}
pub type retro_proc_address_t = ::core::option::Option<unsafe extern "C" fn()>;
pub type retro_get_proc_address_t =
    ::core::option::Option<unsafe extern "C" fn(sym: *const c_char) -> retro_proc_address_t>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_get_proc_address_interface {
    pub get_proc_address: retro_get_proc_address_t,
}
pub const RETRO_LOG_DEBUG: retro_log_level = 0;
pub const RETRO_LOG_INFO: retro_log_level = 1;
pub const RETRO_LOG_WARN: retro_log_level = 2;
pub const RETRO_LOG_ERROR: retro_log_level = 3;
pub const RETRO_LOG_DUMMY: retro_log_level = 2147483647;
pub type retro_log_level = c_uint;
pub type retro_log_printf_t =
    ::core::option::Option<unsafe extern "C" fn(level: retro_log_level, fmt: *const c_char, ...)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_log_callback {
    pub log: retro_log_printf_t,
}
pub type retro_perf_tick_t = u64;
pub type retro_time_t = i64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_perf_counter {
    pub ident: *const c_char,
    pub start: retro_perf_tick_t,
    pub total: retro_perf_tick_t,
    pub call_cnt: retro_perf_tick_t,
    pub registered: bool,
}
pub type retro_perf_get_time_usec_t =
    ::core::option::Option<unsafe extern "C" fn() -> retro_time_t>;
pub type retro_perf_get_counter_t =
    ::core::option::Option<unsafe extern "C" fn() -> retro_perf_tick_t>;
pub type retro_get_cpu_features_t = ::core::option::Option<unsafe extern "C" fn() -> u64>;
pub type retro_perf_log_t = ::core::option::Option<unsafe extern "C" fn()>;
pub type retro_perf_register_t =
    ::core::option::Option<unsafe extern "C" fn(counter: *mut retro_perf_counter)>;
pub type retro_perf_start_t =
    ::core::option::Option<unsafe extern "C" fn(counter: *mut retro_perf_counter)>;
pub type retro_perf_stop_t =
    ::core::option::Option<unsafe extern "C" fn(counter: *mut retro_perf_counter)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_perf_callback {
    pub get_time_usec: retro_perf_get_time_usec_t,
    pub get_cpu_features: retro_get_cpu_features_t,
    pub get_perf_counter: retro_perf_get_counter_t,
    pub perf_register: retro_perf_register_t,
    pub perf_start: retro_perf_start_t,
    pub perf_stop: retro_perf_stop_t,
    pub perf_log: retro_perf_log_t,
}
pub const RETRO_SENSOR_ACCELEROMETER_ENABLE: retro_sensor_action = 0;
pub const RETRO_SENSOR_ACCELEROMETER_DISABLE: retro_sensor_action = 1;
pub const RETRO_SENSOR_GYROSCOPE_ENABLE: retro_sensor_action = 2;
pub const RETRO_SENSOR_GYROSCOPE_DISABLE: retro_sensor_action = 3;
pub const RETRO_SENSOR_ILLUMINANCE_ENABLE: retro_sensor_action = 4;
pub const RETRO_SENSOR_ILLUMINANCE_DISABLE: retro_sensor_action = 5;
pub const RETRO_SENSOR_DUMMY: retro_sensor_action = 2147483647;
pub type retro_sensor_action = c_uint;
pub type retro_set_sensor_state_t = ::core::option::Option<
    unsafe extern "C" fn(port: c_uint, action: retro_sensor_action, rate: c_uint) -> bool,
>;
pub type retro_sensor_get_input_t =
    ::core::option::Option<unsafe extern "C" fn(port: c_uint, id: c_uint) -> f32>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_sensor_interface {
    pub set_sensor_state: retro_set_sensor_state_t,
    pub get_sensor_input: retro_sensor_get_input_t,
}
pub const RETRO_CAMERA_BUFFER_OPENGL_TEXTURE: retro_camera_buffer = 0;
pub const RETRO_CAMERA_BUFFER_RAW_FRAMEBUFFER: retro_camera_buffer = 1;
pub const RETRO_CAMERA_BUFFER_DUMMY: retro_camera_buffer = 2147483647;
pub type retro_camera_buffer = c_uint;
pub type retro_camera_start_t = ::core::option::Option<unsafe extern "C" fn() -> bool>;
pub type retro_camera_stop_t = ::core::option::Option<unsafe extern "C" fn()>;
pub type retro_camera_lifetime_status_t = ::core::option::Option<unsafe extern "C" fn()>;
pub type retro_camera_frame_raw_framebuffer_t = ::core::option::Option<
    unsafe extern "C" fn(buffer: *const u32, width: c_uint, height: c_uint, pitch: size_t),
>;
pub type retro_camera_frame_opengl_texture_t = ::core::option::Option<
    unsafe extern "C" fn(texture_id: c_uint, texture_target: c_uint, affine: *const f32),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_camera_callback {
    pub caps: u64,
    pub width: c_uint,
    pub height: c_uint,
    pub start: retro_camera_start_t,
    pub stop: retro_camera_stop_t,
    pub frame_raw_framebuffer: retro_camera_frame_raw_framebuffer_t,
    pub frame_opengl_texture: retro_camera_frame_opengl_texture_t,
    pub initialized: retro_camera_lifetime_status_t,
    pub deinitialized: retro_camera_lifetime_status_t,
}
pub type retro_location_set_interval_t =
    ::core::option::Option<unsafe extern "C" fn(interval_ms: c_uint, interval_distance: c_uint)>;
pub type retro_location_start_t = ::core::option::Option<unsafe extern "C" fn() -> bool>;
pub type retro_location_stop_t = ::core::option::Option<unsafe extern "C" fn()>;
pub type retro_location_get_position_t = ::core::option::Option<
    unsafe extern "C" fn(
        lat: *mut f64,
        lon: *mut f64,
        horiz_accuracy: *mut f64,
        vert_accuracy: *mut f64,
    ) -> bool,
>;
pub type retro_location_lifetime_status_t = ::core::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_location_callback {
    pub start: retro_location_start_t,
    pub stop: retro_location_stop_t,
    pub get_position: retro_location_get_position_t,
    pub set_interval: retro_location_set_interval_t,
    pub initialized: retro_location_lifetime_status_t,
    pub deinitialized: retro_location_lifetime_status_t,
}
pub const RETRO_RUMBLE_STRONG: retro_rumble_effect = 0;
pub const RETRO_RUMBLE_WEAK: retro_rumble_effect = 1;
pub const RETRO_RUMBLE_DUMMY: retro_rumble_effect = 2147483647;
pub type retro_rumble_effect = c_uint;
pub type retro_set_rumble_state_t = ::core::option::Option<
    unsafe extern "C" fn(port: c_uint, effect: retro_rumble_effect, strength: u16) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_rumble_interface {
    pub set_rumble_state: retro_set_rumble_state_t,
}
pub type retro_audio_callback_t = ::core::option::Option<unsafe extern "C" fn()>;
pub type retro_audio_set_state_callback_t =
    ::core::option::Option<unsafe extern "C" fn(enabled: bool)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_audio_callback {
    pub callback: retro_audio_callback_t,
    pub set_state: retro_audio_set_state_callback_t,
}
pub type retro_usec_t = i64;
pub type retro_frame_time_callback_t =
    ::core::option::Option<unsafe extern "C" fn(usec: retro_usec_t)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_frame_time_callback {
    pub callback: retro_frame_time_callback_t,
    pub reference: retro_usec_t,
}
pub type retro_audio_buffer_status_callback_t = ::core::option::Option<
    unsafe extern "C" fn(active: bool, occupancy: c_uint, underrun_likely: bool),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_audio_buffer_status_callback {
    pub callback: retro_audio_buffer_status_callback_t,
}
pub type retro_hw_context_reset_t = ::core::option::Option<unsafe extern "C" fn()>;
pub type retro_hw_get_current_framebuffer_t =
    ::core::option::Option<unsafe extern "C" fn() -> usize>;
pub type retro_hw_get_proc_address_t =
    ::core::option::Option<unsafe extern "C" fn(sym: *const c_char) -> retro_proc_address_t>;
pub const RETRO_HW_CONTEXT_NONE: retro_hw_context_type = 0;
pub const RETRO_HW_CONTEXT_OPENGL: retro_hw_context_type = 1;
pub const RETRO_HW_CONTEXT_OPENGLES2: retro_hw_context_type = 2;
pub const RETRO_HW_CONTEXT_OPENGL_CORE: retro_hw_context_type = 3;
pub const RETRO_HW_CONTEXT_OPENGLES3: retro_hw_context_type = 4;
pub const RETRO_HW_CONTEXT_OPENGLES_VERSION: retro_hw_context_type = 5;
pub const RETRO_HW_CONTEXT_VULKAN: retro_hw_context_type = 6;
pub const RETRO_HW_CONTEXT_DIRECT3D: retro_hw_context_type = 7;
pub const RETRO_HW_CONTEXT_DUMMY: retro_hw_context_type = 2147483647;
pub type retro_hw_context_type = c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_hw_render_callback {
    pub context_type: retro_hw_context_type,
    pub context_reset: retro_hw_context_reset_t,
    pub get_current_framebuffer: retro_hw_get_current_framebuffer_t,
    pub get_proc_address: retro_hw_get_proc_address_t,
    pub depth: bool,
    pub stencil: bool,
    pub bottom_left_origin: bool,
    pub version_major: c_uint,
    pub version_minor: c_uint,
    pub cache_context: bool,
    pub context_destroy: retro_hw_context_reset_t,
    pub debug_context: bool,
}
pub type retro_keyboard_event_t = ::core::option::Option<
    unsafe extern "C" fn(down: bool, keycode: c_uint, character: u32, key_modifiers: u16),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_keyboard_callback {
    pub callback: retro_keyboard_event_t,
}
pub type retro_set_eject_state_t =
    ::core::option::Option<unsafe extern "C" fn(ejected: bool) -> bool>;
pub type retro_get_eject_state_t = ::core::option::Option<unsafe extern "C" fn() -> bool>;
pub type retro_get_image_index_t = ::core::option::Option<unsafe extern "C" fn() -> c_uint>;
pub type retro_set_image_index_t =
    ::core::option::Option<unsafe extern "C" fn(index: c_uint) -> bool>;
pub type retro_get_num_images_t = ::core::option::Option<unsafe extern "C" fn() -> c_uint>;
pub type retro_replace_image_index_t = ::core::option::Option<
    unsafe extern "C" fn(index: c_uint, info: *const retro_game_info) -> bool,
>;
pub type retro_add_image_index_t = ::core::option::Option<unsafe extern "C" fn() -> bool>;
pub type retro_set_initial_image_t =
    ::core::option::Option<unsafe extern "C" fn(index: c_uint, path: *const c_char) -> bool>;
pub type retro_get_image_path_t = ::core::option::Option<
    unsafe extern "C" fn(index: c_uint, path: *mut c_char, len: size_t) -> bool,
>;
pub type retro_get_image_label_t = ::core::option::Option<
    unsafe extern "C" fn(index: c_uint, label: *mut c_char, len: size_t) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_disk_control_callback {
    pub set_eject_state: retro_set_eject_state_t,
    pub get_eject_state: retro_get_eject_state_t,
    pub get_image_index: retro_get_image_index_t,
    pub set_image_index: retro_set_image_index_t,
    pub get_num_images: retro_get_num_images_t,
    pub replace_image_index: retro_replace_image_index_t,
    pub add_image_index: retro_add_image_index_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_disk_control_ext_callback {
    pub set_eject_state: retro_set_eject_state_t,
    pub get_eject_state: retro_get_eject_state_t,
    pub get_image_index: retro_get_image_index_t,
    pub set_image_index: retro_set_image_index_t,
    pub get_num_images: retro_get_num_images_t,
    pub replace_image_index: retro_replace_image_index_t,
    pub add_image_index: retro_add_image_index_t,
    pub set_initial_image: retro_set_initial_image_t,
    pub get_image_path: retro_get_image_path_t,
    pub get_image_label: retro_get_image_label_t,
}
pub const RETRO_PIXEL_FORMAT_0RGB1555: retro_pixel_format = 0;
pub const RETRO_PIXEL_FORMAT_XRGB8888: retro_pixel_format = 1;
pub const RETRO_PIXEL_FORMAT_RGB565: retro_pixel_format = 2;
pub const RETRO_PIXEL_FORMAT_UNKNOWN: retro_pixel_format = 2147483647;
pub type retro_pixel_format = c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_message {
    pub msg: *const c_char,
    pub frames: c_uint,
}
pub const RETRO_MESSAGE_TARGET_ALL: retro_message_target = 0;
pub const RETRO_MESSAGE_TARGET_OSD: retro_message_target = 1;
pub const RETRO_MESSAGE_TARGET_LOG: retro_message_target = 2;
pub type retro_message_target = c_uint;
pub const RETRO_MESSAGE_TYPE_NOTIFICATION: retro_message_type = 0;
pub const RETRO_MESSAGE_TYPE_NOTIFICATION_ALT: retro_message_type = 1;
pub const RETRO_MESSAGE_TYPE_STATUS: retro_message_type = 2;
pub const RETRO_MESSAGE_TYPE_PROGRESS: retro_message_type = 3;
pub type retro_message_type = c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_message_ext {
    pub msg: *const c_char,
    pub duration: c_uint,
    pub priority: c_uint,
    pub level: retro_log_level,
    pub target: retro_message_target,
    pub type_: retro_message_type,
    pub progress: i8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_input_descriptor {
    pub port: c_uint,
    pub device: c_uint,
    pub index: c_uint,
    pub id: c_uint,
    pub description: *const c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_system_info {
    pub library_name: *const c_char,
    pub library_version: *const c_char,
    pub valid_extensions: *const c_char,
    pub need_fullpath: bool,
    pub block_extract: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_game_geometry {
    pub base_width: c_uint,
    pub base_height: c_uint,
    pub max_width: c_uint,
    pub max_height: c_uint,
    pub aspect_ratio: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_system_timing {
    pub fps: f64,
    pub sample_rate: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_system_av_info {
    pub geometry: retro_game_geometry,
    pub timing: retro_system_timing,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_variable {
    pub key: *const c_char,
    pub value: *const c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_core_option_display {
    pub key: *const c_char,
    pub visible: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_core_option_value {
    pub value: *const c_char,
    pub label: *const c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct retro_core_option_definition {
    pub key: *const c_char,
    pub desc: *const c_char,
    pub info: *const c_char,
    pub values: [retro_core_option_value; 128usize],
    pub default_value: *const c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_core_options_intl {
    pub us: *mut retro_core_option_definition,
    pub local: *mut retro_core_option_definition,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_game_info {
    pub path: *const c_char,
    pub data: *const ::core::ffi::c_void,
    pub size: size_t,
    pub meta: *const c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_framebuffer {
    pub data: *mut ::core::ffi::c_void,
    pub width: c_uint,
    pub height: c_uint,
    pub pitch: size_t,
    pub format: retro_pixel_format,
    pub access_flags: c_uint,
    pub memory_flags: c_uint,
}
pub type retro_environment_t = ::core::option::Option<
    unsafe extern "C" fn(cmd: c_uint, data: *mut ::core::ffi::c_void) -> bool,
>;
pub type retro_video_refresh_t = ::core::option::Option<
    unsafe extern "C" fn(
        data: *const ::core::ffi::c_void,
        width: c_uint,
        height: c_uint,
        pitch: size_t,
    ),
>;
pub type retro_audio_sample_t = ::core::option::Option<unsafe extern "C" fn(left: i16, right: i16)>;
pub type retro_audio_sample_batch_t =
    ::core::option::Option<unsafe extern "C" fn(data: *const i16, frames: size_t) -> size_t>;
pub type retro_input_poll_t = ::core::option::Option<unsafe extern "C" fn()>;
pub type retro_input_state_t = ::core::option::Option<
    unsafe extern "C" fn(port: c_uint, device: c_uint, index: c_uint, id: c_uint) -> i16,
>;
extern "C" {
    pub fn retro_set_environment(arg1: retro_environment_t);
}
extern "C" {
    pub fn retro_set_video_refresh(arg1: retro_video_refresh_t);
}
extern "C" {
    pub fn retro_set_audio_sample(arg1: retro_audio_sample_t);
}
extern "C" {
    pub fn retro_set_audio_sample_batch(arg1: retro_audio_sample_batch_t);
}
extern "C" {
    pub fn retro_set_input_poll(arg1: retro_input_poll_t);
}
extern "C" {
    pub fn retro_set_input_state(arg1: retro_input_state_t);
}
extern "C" {
    pub fn retro_init();
}
extern "C" {
    pub fn retro_deinit();
}
extern "C" {
    pub fn retro_api_version() -> c_uint;
}
extern "C" {
    pub fn retro_get_system_info(info: *mut retro_system_info);
}
extern "C" {
    pub fn retro_get_system_av_info(info: *mut retro_system_av_info);
}
extern "C" {
    pub fn retro_set_controller_port_device(port: c_uint, device: c_uint);
}
extern "C" {
    pub fn retro_reset();
}
extern "C" {
    pub fn retro_run();
}
extern "C" {
    pub fn retro_serialize_size() -> size_t;
}
extern "C" {
    pub fn retro_serialize(data: *mut ::core::ffi::c_void, size: size_t) -> bool;
}
extern "C" {
    pub fn retro_unserialize(data: *const ::core::ffi::c_void, size: size_t) -> bool;
}
extern "C" {
    pub fn retro_cheat_reset();
}
extern "C" {
    pub fn retro_cheat_set(index: c_uint, enabled: bool, code: *const c_char);
}
extern "C" {
    pub fn retro_load_game(game: *const retro_game_info) -> bool;
}
extern "C" {
    pub fn retro_load_game_special(
        game_type: c_uint,
        info: *const retro_game_info,
        num_info: size_t,
    ) -> bool;
}
extern "C" {
    pub fn retro_unload_game();
}
extern "C" {
    pub fn retro_get_region() -> c_uint;
}
extern "C" {
    pub fn retro_get_memory_data(id: c_uint) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn retro_get_memory_size(id: c_uint) -> size_t;
}
